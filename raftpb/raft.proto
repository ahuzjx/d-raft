
syntax = "proto2";

package raft;

enum ErrorCode {
    OK = 0;
    UNKOWN = -1;
    UNCOMMITED_INDEX = 1;

    INVALID_TERM = -99;
    BUSY = -100;

    INVALID_INDEX = -200;
    BIG_BATCH = -201;

    STORAGE_READ_ERROR = -300;
    STORAGE_WRITE_ERROR = -310;

    NOT_LEADER = -1000;
    OCCUPY = -1100;
}


// mostly cpy from etc/raft/raftpb/raft.proto
enum EntryType {
	EntryNormal     = 0;
	EntryConfChange = 1;
}

message Entry {
	required EntryType  type  = 1;
	required uint64     term  = 2;
	required uint64     index = 3;
    required uint64     reqid = 4;
	optional bytes      data  = 5;
}

message SnapshotMetadata {
	optional ConfState conf_state     = 1;
    optional uint64    logid          = 2;
	optional uint64    commited_index = 3;
}

message Snapshot {
	optional bytes            data     = 1;
	optional SnapshotMetadata metadata = 2;
}

enum MessageType {
    MsgNull            = 0;
	MsgHup             = 1;
	MsgBeat            = 2;
	MsgProp            = 3;
	MsgApp             = 4;
	MsgAppResp         = 5;
	MsgVote            = 6;
	MsgVoteResp        = 7;
	MsgSnap            = 8;
	MsgHeartbeat       = 9;
	MsgHeartbeatResp   = 10;
	MsgUnreachable     = 11;
	MsgSnapStatus      = 12;

    MsgInvalidTerm     = 13;
}

message Message {
    required MessageType type        = 1;
    required uint64      logid       = 2;
	required uint32      to          = 3;
	required uint32      from        = 4;
	required uint64      term        = 5;
	optional uint64      index       = 6;

	optional uint64      log_term    = 7;

	optional uint64      commit_index = 8;
    optional uint64      commit_term  = 9;

	repeated Entry       entries     = 10;

	optional Snapshot    snapshot    = 11;
	optional bool        reject      = 12;
	optional uint64      reject_hint = 13;

    optional bool        disk_mark = 14;
}

message SoftState {
    optional uint32 role = 1;
    optional uint64 leader_id = 2;
}

message MetaInfo {
    optional uint64 term = 1;
    optional uint64 vote = 2;
    optional uint64 commit = 3;
    // on disk: [min_index, max_index];
    optional uint64 min_index = 4;
    optional uint64 max_index = 5;
}

message HardState {
    optional MetaInfo meta = 1;
    repeated Entry  entries   = 2;
}

message ConfState {
	repeated uint32 nodes = 1;
}

